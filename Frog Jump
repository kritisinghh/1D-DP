/*
Problem Statement
There is a frog on the 1st step of an N stairs long staircase. The frog wants to reach the Nth stair.
HEIGHT[] is the height of the (i-th) stair.
If the frog jumps from the i-th stair, the energy lost in the jump is given by
|HEIGHT[i] - HEIGHT[j]|.

Like in the Frog is on i-th staircase, he can jump either to (i+1)-th stair or to (i+2)-th stair.
Your task is to find the minimum total energy used by the frog to reach from 1st stair to Nth stair.

For Example
If the given HEIGHT array is [10, 20, 10], the answer is 20 as the frog can jump from 1st stair to 2nd stair (|20 - 10| = 10 energy lost), and then a jump from 2nd stair to last stair (|10 - 20| = 10 energy lost).
So, the total energy lost is 20.
*/

// using recursion
int f1(int ind, vector<int> &heights)){
    if (ind==0) return 0;
    int left=f(ind-1)+abs(heights[ind]-heights[ind-1]);
    int right=INT_MAX;
    if (ind>1) right=f(ind-2)+abs(heights[ind]-heights[ind-2]); // else right has some big value
    return min(left, right);
}


// DP, declare an array vector<int> dp(n+1, -1)
// memoization(top down)
int f2(int ind, vector<int> &heights, vector<int> &dp){
    if (ind==0) return 0;
    if (dp[ind]!=-1) return dp[ind];
    int left=f(ind-1)+abs(heights[ind]-heights[ind-1]);
    int right=INT_MAX;
    if (ind>1) right=f(ind-2)+abs(heights[ind]-heights[ind-2]); // else right has some big value
    return dp[ind]=min(left, right);
}


int frogJump(int n, vector<int> &heights){
    // 1. recursion
    return f1(n-1, heights);
    
    // 2. memoization
    vector<int> dp(n+1, -1);
    return f2(n-1, heights, dp);
    
    // 3. tabulation
    vector<int> dp(n, 0);
    dp[0]=0;
    for(int i=1;i<=n-1;i++){
        int fs=dp[i-1]+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if (i>1) ss=dp[i-2]+abs(heights[i]-heights[i-2]);
        dp[i]=min(fs, ss);
    }
    return dp[n-1];
    
    // 4. space optimized
    int prev=0;
    int prev2=0;
    for(int i=1;i<=n-1;i++){
        int fs=prev+abs(heights[i]-heights[i-1]);
        int ss=INT_MAX;
        if (i>1) ss=prev2+abs(heights[i]-heights[i-2]);
        int curr=min(fs, ss);
        prev2=prev;
        prev=curr;
    }
    return prev;
    
}


